[{"/home/hieule/Documents/classes/networks/geni_app/src/index.js":"1","/home/hieule/Documents/classes/networks/geni_app/src/reportWebVitals.js":"2","/home/hieule/Documents/classes/networks/geni_app/src/App.js":"3"},{"size":500,"mtime":1607191881369,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1607191881369,"results":"6","hashOfConfig":"5"},{"size":5687,"mtime":1607530418807,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"4rh68h",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"/home/hieule/Documents/classes/networks/geni_app/src/index.js",[],["16","17"],"/home/hieule/Documents/classes/networks/geni_app/src/reportWebVitals.js",[],"/home/hieule/Documents/classes/networks/geni_app/src/App.js",["18","19","20","21","22","23","24","25"],"import React from 'react';\nimport { RadioGroup, Radio, Button, TextField, FormControlLabel, Grid, Box, Paper, Chip } from '@material-ui/core';\n\nimport Card from '@material-ui/core/Card';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\nimport './App.css';\n\nlet USER_MESSAGE = 1;\nlet CHATBOT_MESSAGE = 0;\nlet ENDPOINT = `http://127.0.0.1:5000/message`;\nlet SOCKET_ENDPOINT = '127.0.0.1:5001'\n\nconst REST_API_TAG = \"REST\"\nconst WEBSOCKET_TAG = \"SOCK\"\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [[CHATBOT_MESSAGE, \"Hello, I am GENI Bot, a chat bot. I will talk to you to day!\"]],\n      inputValue: \"\",\n      logs: [],\n      protocol: \"rest\"\n    };\n  }\n\n  keyPress = (e) => {\n    if(e.keyCode == 13) {\n       this.handleSendButtonClick();\n    }\n  }\n\n  handleOnChange = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    });\n  }\n\n  displayText(texts){\n    let items = texts.map((item, index) => \n    <li key={index}>\n      <Card className={item[0] == USER_MESSAGE ? 'User-text Message-box' : 'Bot-text Message-box'}>{item[1]} </Card>\n    </li>)\n    return (\n      <ul>{items}</ul>\n    )\n  }\n\n  handleSendButtonClick = () => {\n    let updatedInputs = [...this.state.messages];\n    let msg = this.state.inputValue;\n    updatedInputs.push([USER_MESSAGE, msg]);\n    this.setState({messages: updatedInputs, inputValue: \"\"});\n    if (this.state.protocol == 'rest') {\n      this.getResponse_REST_API(msg);\n    } else {\n      this.getResponse_WebSocket(msg);\n    }\n  }\n\n  writeLog = (text, tag) => {\n    this.setState({\n      logs: [\n        ...this.state.logs,\n        { text, tag }\n      ]\n    })\n  }\n\n  getResponse_REST_API = (message) => {\n    this.writeLog(\"Message sent\", REST_API_TAG)\n    const time_start = Date.now();\n    axios.post(\n      ENDPOINT,\n      { text: message, time: time_start }\n    ).then(res => {\n      let response = res.data.text;\n      let updatedInputs = [...this.state.messages];\n      updatedInputs.push([CHATBOT_MESSAGE, response]);\n      this.setState({messages: updatedInputs, inputValue: \"\"});\n\n      const time_end = new Date()\n      this.writeLog(`Response received in ${(time_end - time_start) / 1000}s (${res.data.text})`, REST_API_TAG)\n    }).catch((error) => {\n      this.writeLog(`ERROR in receving response`, REST_API_TAG)\n    })\n  }\n\n  getResponse_WebSocket = (message) => {\n    this.writeLog(`Message sent: \"${message}\"`, WEBSOCKET_TAG);\n    this.socket.emit(\"message\", { text: message, time: Date.now() });\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  \n  componentDidMount() {\n    this.scrollToBottom();\n  }\n  \n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  handleProtocolChange = (e) => {\n    this.setState({\n      protocol: e.target.value\n    })\n\n    if (e.target.value == 'sock') {\n      if (this.socket) {\n        this.socket.disconnect()\n      }\n      this.socket = io(SOCKET_ENDPOINT);\n      console.log(this.socket)\n      this.socket.on(\"connected\", message => {\n        this.writeLog(`WebSocket connection established`, WEBSOCKET_TAG)\n      })\n      this.socket.on('response', (res) => {\n        this.writeLog(`Message received in ${(Date.now() - res.sent_time) / 1000}s: \"${res.text}\"`, WEBSOCKET_TAG)\n        let updatedInputs = [...this.state.messages];\n        updatedInputs.push([CHATBOT_MESSAGE, res.text]);\n        this.setState({messages: updatedInputs, inputValue: \"\"});\n      })\n    }\n\n    this.writeLog(\"Protocol switched to \" + (e.target.value == 'rest' ? \"REST API\" : \"WebSocket\"), '')\n  }\n\n  render() {\n    const logItems = this.state.logs.map((log) => {\n      const chip = log.tag ? <Chip size=\"small\" label={log.tag} /> : '';\n      return (<li class='log-item'>\n        {chip}\n        {\" \" + log.text}\n      </li>)\n    })\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <label className=\"App-link\" >\n            GENI CHATBOT\n          </label>\n        </header>\n        <Grid container>\n          <Grid item md={6}>\n            <Grid container>\n              <Grid item md={12}>\n                <Paper className='textBox' variant=\"outlined\">\n                  {this.displayText(this.state.messages)}\n                  <div style={{ float:\"left\", clear: \"both\" }}\n                    ref={(el) => { this.messagesEnd = el; }}>\n                  </div>\n                </Paper>\n              </Grid>\n              <Grid item md={12}>\n                <RadioGroup onChange={this.handleProtocolChange}>\n                  <FormControlLabel value=\"rest\" control={<Radio checked={this.state.protocol == 'rest'} />} label=\"Rest API\" />\n                  <FormControlLabel value=\"sock\" control={<Radio checked={this.state.protocol == 'sock'} />} label=\"WebSocket\" />\n                </RadioGroup>\n              </Grid>\n              <Grid item md={12}>\n                <TextField \n                  id=\"filled-basic\"\n                  // multiline\n                  // rowsMax={2}\n                  className=\"Text-field\"\n                  label=\"Type a message...\"\n                  onKeyDown={this.keyPress}\n                  value={this.state.inputValue}\n                  onChange={this.handleOnChange}\n                  variant='filled'\n                />\n                <Button variant=\"contained\" color=\"primary\" className=\"Send-button\" onClick={this.handleSendButtonClick}>\n                  Send\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item md={6}>\n            <ul>{logItems}</ul>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":2,"column":72,"nodeType":"32","messageId":"33","endLine":2,"endColumn":75},{"ruleId":"34","severity":1,"message":"35","line":30,"column":18,"nodeType":"36","messageId":"37","endLine":30,"endColumn":20},{"ruleId":"34","severity":1,"message":"35","line":44,"column":32,"nodeType":"36","messageId":"37","endLine":44,"endColumn":34},{"ruleId":"34","severity":1,"message":"35","line":56,"column":29,"nodeType":"36","messageId":"37","endLine":56,"endColumn":31},{"ruleId":"34","severity":1,"message":"35","line":113,"column":24,"nodeType":"36","messageId":"37","endLine":113,"endColumn":26},{"ruleId":"34","severity":1,"message":"35","line":130,"column":61,"nodeType":"36","messageId":"37","endLine":130,"endColumn":63},{"ruleId":"34","severity":1,"message":"35","line":162,"column":95,"nodeType":"36","messageId":"37","endLine":162,"endColumn":97},{"ruleId":"34","severity":1,"message":"35","line":163,"column":95,"nodeType":"36","messageId":"37","endLine":163,"endColumn":97},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]